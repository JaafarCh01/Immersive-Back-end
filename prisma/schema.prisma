generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lessons     Lesson[]
  modules     Module[]
  students    User[]   @relation("UserCourses")
  tests       Test[]
  progress    StudentProgress[]
}

model Lesson {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  courseId    Int
  course      Course   @relation(fields: [courseId], references: [id])
  moduleId    Int?
  module      Module?  @relation(fields: [moduleId], references: [id])
  quizzes     Quiz[]
  progress    StudentProgress[]
}

model Module {
  id       Int      @id @default(autoincrement())
  title    String
  courseId Int
  course   Course   @relation(fields: [courseId], references: [id])
  lessons  Lesson[]
}

model User {
  id           Int               @id @default(autoincrement())
  email        String            @unique
  password     String
  role         String            @default("student")
  courses      Course[]          @relation("UserCourses")
  progress     StudentProgress[]
  testResults  TestResult[]
  notifications Notification[]
}

model StudentProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  completed Boolean  @default(false)
  quizScore Float?
}

model Quiz {
  id        Int      @id @default(autoincrement())
  title     String
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  questions Json
}

model Test {
  id        Int      @id @default(autoincrement())
  title     String
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  results   TestResult[]
}

model TestResult {
  id        Int      @id @default(autoincrement())
  testId    Int
  test      Test     @relation(fields: [testId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  score     Float
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ActivityLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  createdAt DateTime @default(now())
}